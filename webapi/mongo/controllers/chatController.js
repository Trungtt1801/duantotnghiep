const { GoogleGenerativeAI } = require("@google/generative-ai");
const Product = require("../models/productsModel");
const Category = require("../models/categoryModel");
const Keyword = require("../models/keywordModel");
const ProductVariant = require("../models/productVariantModel");
const ChatHistory = require("../models/historychatModel");
require("dotenv").config();

const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });

const knownIntents = ["product", "shipping", "return", "general"];

const detectIntentByAI = async (message) => {
  const prompt = `
Ng∆∞·ªùi d√πng h·ªèi: "${message}"
Ph√¢n lo·∫°i c√¢u n√†y v√†o m·ªôt trong c√°c nh√≥m sau:
- "product": h·ªèi v·ªÅ s·∫£n ph·∫©m, ƒë·ªì, qu·∫ßn √°o, t√¨m ƒë·ªì mua
- "shipping": h·ªèi v·ªÅ giao h√†ng, ph√≠ ship, v·∫≠n chuy·ªÉn
- "return": h·ªèi v·ªÅ ƒë·ªïi tr·∫£, ho√†n h√†ng
- "general": h·ªèi shop b√°n g√¨, c√≥ g√¨
- "other": n·∫øu kh√¥ng thu·ªôc nh√≥m n√†o

Ch·ªâ tr·∫£ l·ªùi ƒë√∫ng 1 t·ª´: product / shipping / return / general / other.
  `;

  const result = await model.generateContent({
    contents: [{ parts: [{ text: prompt }] }],
  });

  return result.response.text().trim().toLowerCase();
};

const chatWithBot = async (req, res) => {
  // L∆∞u √Ω: y√™u c·∫ßu FE g·ª≠i c·∫£ userId v√† message
  const { message, userId } = req.body;
  if (!message) {
    return res.status(400).json({ error: "Thi·∫øu message" });
  }

  const messageLower = message.toLowerCase();

  try {
    const allKeywords = await Keyword.find({});
    const matched = allKeywords.filter((kw) => messageLower.includes(kw.word));
    const matchedIntent = matched.map((k) => k.intent);

    const isProduct = matchedIntent.includes("product");
    const isShipping = matchedIntent.includes("shipping");
    const isReturn = matchedIntent.includes("return");
    const isGeneral = matchedIntent.includes("general");

    let prompt = "";
    let reply = "";

    // === 1. H·ªèi v·ªÅ danh m·ª•c
    if (isGeneral) {
      const categories = await Category.find().select("name");
      const categoryList = categories.map((cat) => cat.name).join(", ");
      prompt = `
Kh√°ch h·ªèi: "${message}".
B·∫°n l√† tr·ª£ l√Ω t∆∞ v·∫•n s·∫£n ph·∫©m th√¢n thi·ªán. Danh m·ª•c hi·ªán c√≥ g·ªìm: ${categoryList}.
Vi·∫øt c√¢u tr·∫£ l·ªùi ng·∫Øn g·ªçn, t·ª± nhi√™n, kh√¥ng s·ª≠ d·ª•ng d·∫•u sao.
      `;

      const result = await model.generateContent({
        contents: [{ parts: [{ text: prompt }] }],
      });
      reply = result.response.text().trim();
      if (userId) {
        await saveChatHistory(userId, message, reply);
      }

      return res.status(200).json({ reply });
    }

    // === 2. H·ªèi v·ªÅ giao h√†ng
    if (isShipping) {
      prompt = `
Kh√°ch h·ªèi: "${message}".
Ch√≠nh s√°ch giao h√†ng: mi·ªÖn ph√≠ n·ªôi th√†nh n·∫øu mua t·ª´ 3 s·∫£n ph·∫©m tr·ªü l√™n. Ngo·∫°i th√†nh t√≠nh ph√≠ 30.000 VNƒê.
Vi·∫øt c√¢u tr·∫£ l·ªùi r√µ r√†ng, th√¢n thi·ªán, kh√¥ng d√πng ƒë·ªãnh d·∫°ng Markdown.
      `;

      const result = await model.generateContent({
        contents: [{ parts: [{ text: prompt }] }],
      });
      reply = result.response.text().trim();
      if (userId) {
        await saveChatHistory(userId, message, reply);
      }

      return res.status(200).json({ reply });
    }

    // === 3. H·ªèi v·ªÅ ƒë·ªïi tr·∫£
    if (isReturn) {
      prompt = `
Kh√°ch h·ªèi: "${message}".
Ch√≠nh s√°ch ƒë·ªïi tr·∫£: h·ªó tr·ª£ trong 7 ng√†y n·∫øu s·∫£n ph·∫©m c√≤n tem m√°c, ch∆∞a s·ª≠ d·ª•ng. Kh√¥ng √°p d·ª•ng v·ªõi ƒë·ªì l√≥t ho·∫∑c h√†ng gi·∫£m gi√°.
Vi·∫øt c√¢u tr·∫£ l·ªùi th√¢n thi·ªán, d·ªÖ hi·ªÉu, kh√¥ng d√πng d·∫•u ** ho·∫∑c ƒë·∫∑c bi·ªát.
      `;
      const result = await model.generateContent({
        contents: [{ parts: [{ text: prompt }] }],
      });
      reply = result.response.text().trim();
      if (userId) {
        await saveChatHistory(userId, message, reply);
      }

      return res.status(200).json({ reply });
    }

    // === 4. H·ªèi v·ªÅ s·∫£n ph·∫©m
    if (isProduct) {
      const orConditions = matched
        .filter((k) => k.intent === "product")
        .map((kw) => ({ name: { $regex: kw.word, $options: "i" } }));

      const products = await Product.find({ $or: orConditions }).limit(3);
      let productInfo = "";

      for (const product of products) {
        const productVariants = await ProductVariant.findOne({
          product_id: product._id,
        });
        let variantInfo = "";

        if (productVariants) {
          for (const v of productVariants.variants) {
            const sizes = v.sizes
              .map((s) => `${s.size} (${s.quantity} c√°i)`)
              .join(", ");
            variantInfo += `- M√†u: ${v.color}, Size: ${sizes}\n`;
          }
        }

        productInfo += `
${product.name}
Gi√°: ${product.price.toLocaleString()} VNƒê
${product.description || ""}
${variantInfo}
`;
      }

     const prompt = `
Kh√°ch h√†ng v·ª´a h·ªèi: "${message}"

Danh s√°ch s·∫£n ph·∫©m g·ª£i √Ω:
${productInfo || "Hi·ªán t·∫°i kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ph√π h·ª£p."}

H√£y vi·∫øt l·∫°i c√¢u tr·∫£ l·ªùi th√¢n thi·ªán, t·ª± nhi√™n nh∆∞ ƒëang nh·∫Øn tin cho kh√°ch. C√¢u tr·∫£ l·ªùi c·∫ßn:
- R√µ r√†ng, d·ªÖ hi·ªÉu.
- Ng·∫Øn g·ªçn, tr√°nh d√†i d√≤ng.
- Kh√¥ng s·ª≠ d·ª•ng ƒë·ªãnh d·∫°ng Markdown (kh√¥ng d√πng d·∫•u * hay **).
- N·∫øu kh√¥ng c√≥ s·∫£n ph·∫©m, h√£y xin l·ªói kh√°ch v√† g·ª£i √Ω gi√∫p ƒë·ª° th√™m.
`;


      const result = await model.generateContent({
        contents: [{ parts: [{ text: prompt }] }],
      });
      reply = result.response.text().trim();
      if (userId) {
        await saveChatHistory(userId, message, reply);
      }

      return res.status(200).json({ reply });
    }

    // === 5. Kh√¥ng x√°c ƒë·ªãnh => h·ªçc t·ª´ m·ªõi
    const existing = await Keyword.findOne({ word: messageLower });
    if (!existing) {
      const aiIntent = await detectIntentByAI(messageLower);
      const intent = knownIntents.includes(aiIntent) ? aiIntent : "unknown";

      await Keyword.create({ word: messageLower, intent });
      console.log(
        `üß† Bot h·ªçc t·ª´ m·ªõi: "${messageLower}" v·ªõi intent "${intent}"`
      );
    }

    reply =
      "B·∫°n vui l√≤ng cho bi·∫øt r√µ lo·∫°i s·∫£n ph·∫©m ho·∫∑c th√¥ng tin b·∫°n c·∫ßn nh√©!";
    await saveChatHistory(userId, message, reply);
    return res.status(200).json({ reply });
  } catch (err) {
    console.error("‚ùå ChatBot Error:", err);
    return res.status(500).json({
      error: "L·ªói x·ª≠ l√Ω y√™u c·∫ßu",
      detail: err.message || "Kh√¥ng r√µ l·ªói",
    });
  }
};

// H√†m l∆∞u l·ªãch s·ª≠ chat
async function saveChatHistory(userId, userMsg, botReply) {
  try {
    const existingChat = await ChatHistory.findOne({ userId });
    if (existingChat) {
      existingChat.messages.push({ role: "user", content: userMsg });
      existingChat.messages.push({ role: "bot", content: botReply });
      existingChat.updatedAt = Date.now();
      await existingChat.save();
    } else {
      const newChat = new ChatHistory({
        userId,
        messages: [
          { role: "user", content: userMsg },
          { role: "bot", content: botReply },
        ],
      });
      await newChat.save();
    }
  } catch (error) {
    console.error("‚ùå L·ªói khi l∆∞u chat history:", error);
  }
}

// === Ch√†o ban ƒë·∫ßu
const welcomeMessage = async (req, res) => {
  try {
    const categories = await Category.find().select("name");
    const categoryList = categories.map((cat) => cat.name).join(", ");
    const prompt = `
B·∫°n l√† tr·ª£ l√Ω b√°n h√†ng c·ªßa shop qu·∫ßn √°o. H√£y ch√†o h·ªèi th√¢n thi·ªán kh√°ch m·ªõi v√† gi·ªõi thi·ªáu c√°c danh m·ª•c hi·ªán c√≥ g·ªìm: ${categoryList}.
Vi·∫øt c√¢u tr·∫£ l·ªùi t·ª± nhi√™n, KH√îNG d√πng ƒë·ªãnh d·∫°ng Markdown (** ho·∫∑c *).
    `;
    const result = await model.generateContent({
      contents: [{ parts: [{ text: prompt }] }],
    });
    const reply = result.response.text().trim();
    await saveChatHistory(req.body.userId, "", reply); // N·∫øu c√≥ userId, ho·∫∑c b·∫°n c√≥ th·ªÉ truy·ªÅn m·∫∑c ƒë·ªãnh
    return res.status(200).json({ reply });
  } catch (err) {
    console.error("‚ùå Welcome Error:", err);
    return res.status(500).json({
      error: "L·ªói t·∫°o l·ªùi ch√†o",
      detail: err.message || "Kh√¥ng r√µ l·ªói",
    });
  }
};

module.exports = { chatWithBot, welcomeMessage };

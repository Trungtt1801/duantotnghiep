const mongoose = require("mongoose");
const Review = require("../models/reviewModel");
const baseUrl = "http://localhost:3000/api/images/";
const Product = require("../models/productsModel");
const User = require("../models/userModels");
const OrderDetail = require("../models/orderDetailModel");
const addReview = async (req, res) => {
  try {
    const { product_id, user_id, content, rating } = req.body;
    const images = req.files?.map((file) => `${baseUrl}/${file.filename}`) || [];

    if (!product_id || !user_id || !content || !rating) {
      return res.status(400).json({ message: "Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc" });
    }

    // ‚úÖ Ki·ªÉm tra xem user ƒë√£ t·ª´ng ƒë√°nh gi√° s·∫£n ph·∫©m n√†y ch∆∞a
    const existingReview = await Review.findOne({ product_id, user_id });

    if (existingReview) {
      return res.status(400).json({
        message: "B·∫°n ƒë√£ ƒë√°nh gi√° s·∫£n ph·∫©m n√†y r·ªìi.",
        review: existingReview,
      });
    }

    // ‚úÖ N·∫øu ch∆∞a c√≥ th√¨ ti·∫øp t·ª•c th√™m m·ªõi
    const newReview = new Review({
      product_id,
      user_id,
      content,
      rating,
      images,
    });

    await newReview.save();

    res.status(201).json({
      message: "Th√™m ƒë√°nh gi√° th√†nh c√¥ng",
      review: newReview,
    });
  } catch (error) {
    console.log("L·ªói:", error);
    res.status(500).json({ message: "L·ªói server khi th√™m ƒë√°nh gi√°", error: error.message });
  }
};

// Ki·ªÉm tra ƒë√£ ƒë√°nh gi√° hay ch∆∞a
const checkIfReviewed = async (req, res) => {
  const { product_id, user_id } = req.params;
  const existed = await Review.findOne({ product_id, user_id });
  if (existed) {
    return res.status(200).json({ reviewed: true });
  }
  res.status(200).json({ reviewed: false });
};

// L·∫•y t·∫•t c·∫£ ƒë√°nh gi√°
const getAllReviews = async (req, res) => {
  try {
    const { page = 1, limit = 10, rating, product_id, user_id, keyword } = req.query;

    const filter = {};
    if (rating) filter.rating = Number(rating);
    if (product_id) filter.product_id = product_id;
    if (user_id) filter.user_id = user_id;
    if (keyword) filter.content = { $regex: keyword, $options: "i" };

    const skip = (Number(page) - 1) * Number(limit);
    const total = await Review.countDocuments(filter);

    const reviews = await Review.find(filter)
      .populate({ path: "user_id", select: "name avatar email" })
      // üëá ch·ªçn th√™m shop_id t·ª´ product
      .populate({ path: "product_id", select: "name images description shop_id" })
      .sort({ createdAt: -1 })
      .skip(skip)
      .limit(Number(limit))
      .lean(); // üëà ti·ªán ƒë·ªÉ ch·ªânh s·ª≠a object

    const updated = reviews.map((r) => ({
      ...r,
      // üëá ƒë∆∞a shop_id ra top-level (ho·∫∑c b·∫°n ƒë·ªÉ ·ªü product_id.shop_id c≈©ng ƒë∆∞·ª£c)
      shop_id: r.product_id?.shop_id ?? null,
      images: (r.images || []).map((img) =>
        img.startsWith("http") ? img : `${baseUrl}/${img}`
      ),
    }));

    res.status(200).json({
      total,
      page: Number(page),
      totalPages: Math.ceil(total / limit),
      reviews: updated,
    });
  } catch (err) {
    res.status(500).json({
      message: "L·ªói server khi l·∫•y danh s√°ch ƒë√°nh gi√°",
      error: err.message,
    });
  }
};


// L·∫•y ƒë√°nh gi√° theo s·∫£n ph·∫©m
const getReviewByProduct = async (req, res) => {
  try {
    const { product_id } = req.params;

    const reviews = await Review.find({ product_id })
      .populate("user_id", "name avatar")
      .populate("product_id", "name image");

    const updated = reviews.map((r) => ({
      ...r.toObject(),
      images: (r.images || []).map((img) =>
        img.startsWith("http") ? img : `${baseUrl}/${img}`
      ),
    }));

    res.status(200).json(updated);
  } catch (err) {
    res.status(500).json({ message: "L·ªói khi l·∫•y ƒë√°nh gi√° theo s·∫£n ph·∫©m", error: err.message });
  }
};

// L·∫•y ƒë√°nh gi√° theo ƒë∆°n h√†ng
const getReviewByOrder = async (req, res) => {
  try {
    const { order_id } = req.params;

    const details = await OrderDetail.find({ order_id }).select("_id");
    const detailIds = details.map((d) => d._id);

    const reviews = await Review.find({ orderDetail_id: { $in: detailIds } })
      .populate("user_id", "name avatar")
      .populate("product_id", "name image");

    const updated = reviews.map((r) => ({
      ...r.toObject(),
      images: (r.images || []).map((img) =>
        img.startsWith("http") ? img : `${baseUrl}/${img}`
      ),
    }));

    res.status(200).json(updated);
  } catch (err) {
    res.status(500).json({ message: "L·ªói khi l·∫•y ƒë√°nh gi√° theo ƒë∆°n h√†ng", error: err.message });
  }
};

// Xo√° ƒë√°nh gi√°
const deleteReview = async (req, res) => {
  try {
    const { id } = req.params;

    const review = await Review.findByIdAndDelete(id);
    if (!review) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ƒë√°nh gi√°" });
    }

    res.status(200).json({ message: "Xo√° ƒë√°nh gi√° th√†nh c√¥ng" });
  } catch (err) {
    res.status(500).json({ message: "L·ªói khi xo√° ƒë√°nh gi√°", error: err.message });
  }
};

module.exports = {
  addReview,
  getAllReviews,
  getReviewByProduct,
  getReviewByOrder,
  deleteReview,
  checkIfReviewed,
};

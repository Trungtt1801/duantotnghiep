const mongoose = require("mongoose");

const shopSchema = new mongoose.Schema(
  {
    user_id: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "User", // li√™n k·∫øt v·ªõi b·∫£ng User
      required: true,
    },
    name: {
      type: String,
      required: true,
      trim: true,
    },
    address: {
      type: String,
      required: true,
      trim: true,
    },
    phone: {
      type: String,
      required: true,
      match: /^[0-9]{9,15}$/, // validate s·ªë ƒëi·ªán tho·∫°i (9-15 s·ªë)
    },
    email: {
      type: String,
      required: true,
      trim: true,
      lowercase: true,
      match: /^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$/, // validate email
    },
    status: {
      type: String,
      enum: ["active", "inactive", "pending"],
      default: "pending",
    },
    description: {
      type: String,
      default: "",
    },
    avatar: {
      type: String,
      default: "", // URL ·∫£nh ƒë·∫°i di·ªán shop
    },
    banner: {
      type: String,
      default: "", // URL ·∫£nh banner shop
    },

    // üü¢ Th√™m c√°c tr∆∞·ªùng n√¢ng cao
    sale_count: {
      type: Number,
      default: 0, // t·ªïng s·ªë s·∫£n ph·∫©m ƒë√£ b√°n
    },
    rating: {
      average: { type: Number, default: 0 }, // ƒëi·ªÉm trung b√¨nh (1‚Äì5)
      count: { type: Number, default: 0 },   // s·ªë l∆∞·ª£t ƒë√°nh gi√°
    },
    followers: [
      { type: mongoose.Schema.Types.ObjectId, ref: "User" } // danh s√°ch user follow
    ],
  },
  {
    timestamps: { createdAt: "created_at", updatedAt: "updated_at" },
  }
);

module.exports = mongoose.model("Shop", shopSchema);
